#!/bin/sh
#
# Complete X Configuration Script for GhostBSD/FreeBSD
# POSIX sh compatible
# Prefers Xorg autoconfiguration; only writes xorg.conf when necessary.
#

set -eu
umask 022

# ---- Configuration ---------------------------------------------------------
SCRIPT_NAME="$(basename "$0")"
LOG_FILE="/var/log/xconfig.log"

# On FreeBSD the canonical path is /usr/local/etc/X11/xorg.conf.
XORG_ETC="/usr/local/etc/X11"
XORG_CONF="${XORG_ETC}/xorg.conf"
BACKUP_DIR="${XORG_ETC}/backup"

# Xorg binary name on FreeBSD
XORG_BIN="${XORG_BIN:-Xorg}"

# ---- Logging ---------------------------------------------------------------
log() {
    # level message...
    lvl="$1"; shift
    ts=$(date '+%Y-%m-%d %H:%M:%S')
    # use printf (portable) and ensure log file exists
    [ -d "$(dirname "$LOG_FILE")" ] || mkdir -p "$(dirname "$LOG_FILE")"
    printf "[%s] [%s] %s\n" "$ts" "$lvl" "$*" | tee -a "$LOG_FILE"
}
info(){ log INFO "$@"; }
warn(){ log WARN "$@"; }
error(){ log ERROR "$@"; printf "Error: %s\n" "$*" >&2; }

# ---- Helpers ---------------------------------------------------------------
need_root() {
    if [ "$(id -u)" -ne 0 ]; then
        printf "Error: Must be run as root\n" >&2
        exit 1
    fi
}

backup_config() {
    if [ -f "$XORG_CONF" ]; then
        [ -d "$BACKUP_DIR" ] || mkdir -p "$BACKUP_DIR"
        bname="xorg.conf.$(date +%Y%m%d_%H%M%S)"
        cp -p "$XORG_CONF" "$BACKUP_DIR/$bname"
        info "Backed up existing config to $BACKUP_DIR/$bname"
    fi
}

# Append a kernel module uniquely to rc.conf (kld_list) and load it now.
ensure_kld_persist_and_loaded() {
    mod="$1"
    current="$(sysrc -n kld_list 2>/dev/null || true)"
    case " $current " in
        *" $mod "*) : ;;  # already present
        *) sysrc kld_list="$current $mod" >/dev/null ;;
    esac
    if ! kldstat -v | grep -qw "$mod"; then
        if ! kldload "$mod" 2>/dev/null; then
            warn "Failed to load module: $mod"
            return 1
        fi
    fi
    info "Kernel module ensured: $mod"
}

# Unload possibly conflicting DRM/NVIDIA stacks before switching
unload_video_modules() {
    for m in amdgpu radeonkms i915kms nvidia-modeset nvidia; do
        if kldstat -v | grep -qw "$m"; then
            kldunload "$m" 2>/dev/null || true
        fi
    done
}

# ---- Hardware Detection ----------------------------------------------------
detect_hardware() {
    # Return: one of virtualbox|vmware|qemu|nvidia-*|intel|amdgpu|radeonkms|unknown
    pci_info="$(pciconf -lv 2>/dev/null || true)"

    # virtual guests first
    echo "$pci_info" | grep -qi "virtualbox" && { echo "virtualbox"; return; }
    echo "$pci_info" | grep -Eqi "vmware|vendor=0x15ad" && { echo "vmware"; return; }
    echo "$pci_info" | grep -Eqi "qemu|vendor=0x1234" && { echo "qemu"; return; }

    # vendors
    if echo "$pci_info" | grep -q "vendor=0x10de"; then
        detect_nvidia_family "$pci_info"
        return
    fi
    if echo "$pci_info" | grep -q "vendor=0x8086.*vga"; then
        echo "intel"; return
    fi
    if echo "$pci_info" | grep -q "vendor=0x1002"; then
        detect_amd_family "$pci_info"
        return
    fi

    echo "unknown"
}

detect_nvidia_family() {
    pci_info="$1"
    dev="$(echo "$pci_info" | awk '/vendor=0x10de/{f=1} f && /device=/{print $1; exit}' | cut -d'=' -f2)"
    if [ -z "${dev:-}" ]; then
        warn "Cannot determine NVIDIA device ID; using latest driver"
        echo "nvidia-latest"; return
    fi
    devhex="$(echo "$dev" | sed 's/^0x//')"
    info "NVIDIA device ID: 0x$devhex"

    # Keep coarse buckets, fall back to 'nvidia-driver' if legacy pkgs not present.
    case "$devhex" in
        2[8-9]*|[3-9]* ) echo "nvidia-latest" ;; # very new
        2[6-7]*|2[2-5]* ) echo "nvidia-latest" ;;
        1[e-f]*|20*|21* ) echo "nvidia-470" ;;
        1[0-9a-d]*      ) echo "nvidia-390" ;;
        [6-9a-f]*       ) echo "nvidia-340" ;;
        *               ) echo "nvidia-legacy" ;;
    esac
}

detect_amd_family() {
    pci_info="$1"
    dev="$(echo "$pci_info" | awk '/vendor=0x1002/{f=1} f && /device=/{print $1; exit}' | cut -d'=' -f2)"
    [ -n "${dev:-}" ] && info "AMD device ID: $dev"
    # Prefer amdgpu for newer, radeonkms otherwise (simple heuristic)
    case "${dev:-}" in
        0x6[9a-f]*|0x7*|0x[89a-f]*) echo "amdgpu" ;;
        *                          ) echo "radeonkms" ;;
    esac
}

# ---- Xorg config/test ------------------------------------------------------
# Generate a one-off config via Xorg -configure (only when needed).
xorg_configure_into() {
    out="$1"
    rm -f /root/xorg.conf.new
    if "$XORG_BIN" -configure >/tmp/xconfig.log 2>&1; then
        if [ -f /root/xorg.conf.new ]; then
            mkdir -p "$XORG_ETC"
            cp /root/xorg.conf.new "$out"
            return 0
        fi
    fi
    return 1
}

# Minimal, race-free smoke test: start Xorg on a dummy vt, kill after N sec.
test_x_config() {
    cfg="$1"; secs="${2:-10}"
    info "Testing X configuration ($cfg) for ~${secs}s"
    # run Xorg on vt9 to avoid current console; headless test
    "$XORG_BIN" -config "$cfg" -retro vt9 >/dev/null 2>&1 &
    xp=$!
    # Give it a small head start
    sleep 2
    if kill -0 "$xp" 2>/dev/null; then
        # Let it live a bit, then kill
        ( sleep "$secs"; kill "$xp" 2>/dev/null || true ) &
        sp=$!
        wait "$xp" 2>/dev/null || true
        kill "$sp" 2>/dev/null || true
        info "X configuration test completed"
        return 0
    fi
    warn "X failed to stay running during test"
    return 1
}

# Safe VESA fallback config
write_vesa_config() {
    mkdir -p "$XORG_ETC"
    cat > "$XORG_CONF" <<'EOF'
Section "Device"
    Identifier "VideoDevice"
    Driver "vesa"
EndSection

Section "Monitor"
    Identifier "Monitor0"
EndSection

Section "Screen"
    Identifier "Screen0"
    Monitor "Monitor0"
    Device "VideoDevice"
    DefaultDepth 24
    SubSection "Display"
        Depth 24
        Modes "1024x768" "800x600" "640x480"
    EndSubSection
EndSection

Section "ServerFlags"
    Option "IgnoreABI" "1"
EndSection
EOF
    info "Applied VESA xorg.conf with IgnoreABI"
}

# ---- Driver setups ---------------------------------------------------------
setup_nvidia() {
    family="$1"
    info "Setting up NVIDIA ($family)"
    unload_video_modules

    # Map to available pkg names with graceful fallback
    pkg_try=""
    case "$family" in
        nvidia-latest) pkg_try="nvidia-driver nvidia-driver-580 nvidia-driver-550 nvidia-driver-535" ;;
        nvidia-470)    pkg_try="nvidia-driver-470 nvidia-driver" ;;
        nvidia-390)    pkg_try="nvidia-driver-390 nvidia-driver-470 nvidia-driver" ;;
        nvidia-340)    pkg_try="nvidia-driver-340 nvidia-driver-390 nvidia-driver" ;;
        nvidia-legacy) pkg_try="nvidia-driver nvidia-driver-470" ;;
        *)             pkg_try="nvidia-driver" ;;
    esac

    installed=""
    for p in $pkg_try; do
        if pkg info "$p" >/dev/null 2>&1 || pkg install -y "$p" >/devnull 2>&1; then
            installed="$p"; break
        fi
        # try repo if not present
        if pkg install -y "$p"; then
            installed="$p"; break
        fi
    done

    if [ -z "$installed" ]; then
        error "Failed to install an NVIDIA driver package"
        pkg search "^nvidia-driver" 2>/dev/null | sed 's/^/  /' >&2 || true
        return 1
    fi
    info "NVIDIA package ready: $installed"

    # Modern drivers use nvidia-modeset; older use nvidia
    mod="nvidia-modeset"
    case "$installed" in
        *340*|*304*) mod="nvidia" ;;
    esac
    ensure_kld_persist_and_loaded "$mod" || return 1

    backup_config
    if xorg_configure_into "$XORG_CONF"; then
        # ensure nvidia in Device section(s)
        # BSD sed: use -i '' for in-place
        sed -i '' -e 's/"nv"/"nvidia"/g; s/"vesa"/"nvidia"/g; s/"scfb"/"nvidia"/g; s/"modesetting"/"nvidia"/g' "$XORG_CONF"
        # Add ServerFlags IgnoreABI if missing
        if ! grep -q 'Section "ServerFlags"' "$XORG_CONF" 2>/dev/null; then
            cat >> "$XORG_CONF" <<'EOF'

Section "ServerFlags"
    Option "IgnoreABI" "1"
EndSection
EOF
        fi
        if test_x_config "$XORG_CONF" 8; then
            info "NVIDIA configuration generated and smoke-tested"
            return 0
        fi
        warn "NVIDIA configuration created but test did not pass"
        return 0
    fi

    warn "Xorg -configure failed; falling back to autoconfiguration (no xorg.conf)"
    rm -f "$XORG_CONF"
    return 0
}

setup_intel() {
    info "Setting up Intel (i915kms)"
    unload_video_modules
    if ensure_kld_persist_and_loaded "i915kms"; then
        backup_config
        # Prefer autoconfig (generally best for Intel)
        rm -f "$XORG_CONF" 2>/dev/null || true
        info "Intel setup complete (autoconfig)"
        return 0
    fi
    warn "Failed to load i915kms; using VESA fallback"
    backup_config
    write_vesa_config
    return 0
}

setup_amd() {
    drv="$1"   # amdgpu|radeonkms
    info "Setting up AMD ($drv)"
    unload_video_modules
    if ensure_kld_persist_and_loaded "$drv"; then
        backup_config
        # Prefer autoconfig
        rm -f "$XORG_CONF" 2>/dev/null || true
        info "AMD setup complete (autoconfig)"
        return 0
    fi
    warn "Failed to load $drv; using VESA fallback"
    backup_config
    write_vesa_config
    return 0
}

setup_virtualbox() {
    info "Setting up VirtualBox guest"
    sysrc vboxguest_enable=YES >/dev/null || true
    sysrc vboxservice_enable=YES >/dev/null || true
    service vboxguest onestart >/dev/null 2>&1 || true
    service vboxservice onestart >/devnull 2>&1 || true
    backup_config
    rm -f "$XORG_CONF" 2>/dev/null || true
    info "VirtualBox setup complete (autoconfig)"
}

setup_vmware() {
    info "Setting up VMware guest"
    backup_config
    vmcfg="/usr/local/etc/X11/cardDetect/XF86Config.vmware"
    if [ -f "$vmcfg" ]; then
        mkdir -p "$XORG_ETC"
        cp "$vmcfg" "$XORG_CONF"
        if test_x_config "$XORG_CONF" 8; then
            info "VMware config applied and tested"
            return 0
        fi
        warn "VMware config test failed; using VESA"
    fi
    write_vesa_config
}

setup_vesa() {
    info "Setting up VESA (safe mode)"
    backup_config
    write_vesa_config
    return 0
}

# ---- System Diagnostics ----------------------------------------------------
check_system_state() {
    info "=== System State Check ==="
    fbsd_version="$(freebsd-version 2>/dev/null || uname -r)"
    info "FreeBSD version: $fbsd_version"

    info "Available NVIDIA packages (top 10):"
    pkg search "^nvidia-driver" 2>/dev/null | head -10 | sed 's/^/  /' | while IFS= read -r l; do info "$l"; done

    if kldstat -v | grep -qw linux; then info "Linux compat: LOADED"; else info "Linux compat: not loaded"; fi

    info "Detected GPU(s):"
    pciconf -lv 2>/dev/null | awk '/class=0x030000/{show=1} show && NF {print "  " $0; c++} c==10{exit}' | while IFS= read -r l; do info "$l"; done

    if [ -d "/xdrivers" ]; then
        cnt=$(ls /xdrivers/*.pkg 2>/dev/null | wc -l | tr -d ' ')
        info "Custom driver dir: /xdrivers ($cnt packages)"
    else
        info "Custom driver dir: not present"
    fi

    if [ -f "$XORG_CONF" ]; then
        info "Current xorg.conf: present"
        grep -E "Driver|Identifier" "$XORG_CONF" 2>/dev/null | sed 's/^/  /' | while IFS= read -r l; do info "$l"; done
    else
        info "Current xorg.conf: not present (autoconfig)"
    fi

    info "Xorg self-test (configure only)"
    if "$XORG_BIN" -configure >/tmp/x-test.log 2>&1; then
        info "Xorg -configure: OK"
        rm -f /root/xorg.conf.new
    else
        warn "Xorg -configure: issues detected (see /tmp/x-test.log)"
        head -5 /tmp/x-test.log 2>/dev/null | sed 's/^/  /' | while IFS= read -r l; do info "$l"; done
    fi
}

# ---- Auto / Manual ---------------------------------------------------------
auto_configure() {
    info "Starting automatic X configuration"
    hw="$(detect_hardware)"
    info "Detected hardware: $hw"
    case "$hw" in
        virtualbox) setup_virtualbox ;;
        vmware)     setup_vmware ;;
        qemu)       setup_vesa ;;                 # qemu/virtio works with vesa/scfb
        nvidia-*)   setup_nvidia "$hw" ;;
        intel)      setup_intel ;;
        amdgpu|radeonkms) setup_amd "$hw" ;;
        *)          warn "Unknown hardware; using VESA fallback"; setup_vesa ;;
    esac
}

manual_setup() {
    info "Starting manual setup"
    if ! command -v dialog >/dev/null 2>&1; then
        error "dialog(1) not installed; manual mode unavailable"
        return 1
    fi

    while :; do
        dialog --title "X Configuration" \
          --menu "Select graphics configuration:" 18 70 14 \
          "auto"          "Automatic detection (recommended)" \
          "intel"         "Intel graphics (i915kms)" \
          "amd-auto"      "AMD graphics (auto detect amdgpu/radeonkms)" \
          "amdgpu"        "AMD amdgpu driver" \
          "radeonkms"     "AMD radeonkms driver" \
          "nvidia-latest" "NVIDIA latest driver" \
          "nvidia-470"    "NVIDIA 470 legacy driver" \
          "nvidia-390"    "NVIDIA 390 legacy driver" \
          "nvidia-340"    "NVIDIA 340 legacy driver" \
          "vesa"          "VESA (safe mode)" \
          "virtualbox"    "VirtualBox guest" \
          "vmware"        "VMware guest" \
          "test"          "Test current configuration" \
          "exit"          "Exit without changes" 2>/tmp/xconfig_choice || break

        choice="$(cat /tmp/xconfig_choice 2>/dev/null || true)"; rm -f /tmp/xconfig_choice

        case "$choice" in
            auto)
                if auto_configure; then dialog --msgbox "Automatic configuration successful." 6 50; break; else dialog --msgbox "Automatic configuration failed." 6 40; fi
                ;;
            intel)
                if setup_intel; then dialog --msgbox "Intel configured successfully." 6 50; break; else dialog --msgbox "Intel configuration failed." 6 40; fi
                ;;
            amd-auto)
                amd_drv="$(detect_amd_family "$(pciconf -lv)")"
                if setup_amd "$amd_drv"; then dialog --msgbox "AMD configured successfully." 6 50; break; else dialog --msgbox "AMD configuration failed." 6 40; fi
                ;;
            amdgpu|radeonkms)
                if setup_amd "$choice"; then dialog --msgbox "AMD $choice configured successfully." 6 50; break; else dialog --msgbox "AMD $choice failed." 6 40; fi
                ;;
            nvidia-*)
                if setup_nvidia "$choice"; then dialog --msgbox "NVIDIA configured successfully." 6 50; break; else dialog --msgbox "NVIDIA configuration failed." 6 40; fi
                ;;
            vesa)
                if setup_vesa; then dialog --msgbox "VESA configuration successful." 6 40; break; else dialog --msgbox "VESA configuration failed." 6 40; fi
                ;;
            virtualbox)
                if setup_virtualbox; then dialog --msgbox "VirtualBox configuration successful." 6 50; break; else dialog --msgbox "VirtualBox configuration failed." 6 40; fi
                ;;
            vmware)
                if setup_vmware; then dialog --msgbox "VMware configuration successful." 6 50; break; else dialog --msgbox "VMware configuration failed." 6 40; fi
                ;;
            test)
                if [ -f "$XORG_CONF" ]; then
                    if test_x_config "$XORG_CONF" 8; then dialog --msgbox "Current configuration test passed." 6 50; else dialog --msgbox "Current configuration test failed." 6 50; fi
                else
                    dialog --msgbox "No xorg.conf present; autoconfig is used at runtime." 6 60
                fi
                ;;
            exit) break ;;
        esac
    done
}

check_environment() {
    need_root
    mkdir -p "$BACKUP_DIR" "$XORG_ETC"
    info "Starting $SCRIPT_NAME (PID: $$)"
}

check_system_state_wrapper() {
    check_system_state
}

usage() {
    cat >&2 <<EOF
Usage: $0 [auto|setup|manual|nvidia|intel|amd|vesa|virtualbox|vmware|test|debug]
  auto        Automatic configuration (default)
  setup       Interactive manual setup
  manual      Alias for setup
  nvidia      NVIDIA graphics (auto-detect family)
  intel       Intel graphics (i915kms)
  amd         AMD graphics (auto-detect amdgpu/radeonkms)
  vesa        VESA safe mode
  virtualbox  VirtualBox guest
  vmware      VMware guest
  test        Test current xorg.conf (if present)
  debug       Show system diagnostics
EOF
}

main() {
    mode="${1:-auto}"
    check_environment
    info "X configuration mode: $mode"

    case "$mode" in
        auto)         auto_configure ;;
        setup|manual) manual_setup ;;
        nvidia)
            drv="$(detect_nvidia_family "$(pciconf -lv)")"
            setup_nvidia "$drv"
            ;;
        intel)        setup_intel ;;
        amd)
            drv="$(detect_amd_family "$(pciconf -lv)")"
            setup_amd "$drv"
            ;;
        vesa)         setup_vesa ;;
        virtualbox)   setup_virtualbox ;;
        vmware)       setup_vmware ;;
        test)
            if [ -f "$XORG_CONF" ]; then
                if test_x_config "$XORG_CONF" 8; then info "Current X configuration test passed"; exit 0; else error "Current X configuration test failed"; exit 1; fi
            else
                error "No xorg.conf present to test (autoconfig in use)"; exit 1
            fi
            ;;
        debug|check)  check_system_state_wrapper ;;
        *)            usage; exit 1 ;;
    esac
}

main "$@"
